name: Manually Test and Deploy Branch to Vercel
on:
  workflow_dispatch:
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Branch name
        run: echo running on branch ${GITHUB_REF##*/}
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: cypress-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Build
        run: |
          yarn --frozen-lockfile --prefer-offline
          ./node_modules/.bin/ember build --output-path="test_build" --environment=development

      - name: Upload Test Build artifact
        uses: actions/upload-artifact@v2
        with:
          name: test_build
          path: test_build/

  ember_test:
    name: Ember Testing
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: cypress-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Download Test Build artifact
        uses: actions/download-artifact@v2
        with:
          name: test_build
          path: test_build/

      - name: Ember Testing
        env:
          COVERAGE: true
        run: |
          yarn run ember test --path=test_build

#       - name: Publish code coverage
#         uses: paambaati/codeclimate-action@v2.7.5
#         env:
#           CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

  cypress_test:
    name: Cypress Testing
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2, 3, 4, 5]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: cypress-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Download Test Build artifact
        uses: actions/download-artifact@v2
        with:
          name: test_build
          path: test_build/

      - name: Cypress Testing
        uses: cypress-io/github-action@v2
        with:
          install: false
          config: defaultCommandTimeout=15000
          start: yarn start --path=test_build
          wait-on: 'http://localhost:4200'
          wait-on-timeout: 600
          quiet: true
          record: true
          parallel: true
          group: 'Tests'
          spec: |
            cypress/integration/client_admin/doi.test.ts
            cypress/integration/client_admin/info.test.ts
            cypress/integration/client_admin/prefixes.test.ts
            cypress/integration/client_admin/settings.test.ts
            cypress/integration/consortium_admin/contacts.test.ts
            cypress/integration/consortium_admin/info.test.ts
            cypress/integration/consortium_admin/settings.test.ts
            cypress/integration/organization_admin/contacts.test.ts
            cypress/integration/organization_admin/doi.test.ts
            cypress/integration/organization_admin/info.test.ts
            cypress/integration/organization_admin/prefixes.test.ts
            cypress/integration/organization_admin/repositories.test.ts
            cypress/integration/organization_admin/settings.test.ts
            cypress/integration/staff_admin/contacts.test.ts
            cypress/integration/staff_admin/info.test.ts
            cypress/integration/staff_admin/settings.test.ts
            cypress/integration/ui/consent.test.ts
            cypress/integration/ui/login.test.ts
            cypress/integration/anonymous/admin.test.ts
            cypress/integration/anonymous/anonymous.test.ts
            cypress/integration/anonymous/doi.test.ts
            cypress/integration/anonymous/provider.test.ts
            cypress/integration/anonymous/repository.test.ts
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLIENT_ADMIN_USERNAME: ${{ secrets.CLIENT_ADMIN_USERNAME }}
          CLIENT_ADMIN_PASSWORD: ${{ secrets.CLIENT_ADMIN_PASSWORD }}
          CONSORTIUM_ADMIN_USERNAME: ${{ secrets.CONSORTIUM_ADMIN_USERNAME }}
          CONSORTIUM_ADMIN_PASSWORD: ${{ secrets.CONSORTIUM_ADMIN_PASSWORD }}
          ORGANIZATION_ADMIN_USERNAME: ${{ secrets.ORGANIZATION_ADMIN_USERNAME }}
          ORGANIZATION_ADMIN_PASSWORD: ${{ secrets.ORGANIZATION_ADMIN_PASSWORD }}
          STAFF_ADMIN_USERNAME: ${{ secrets.STAFF_ADMIN_USERNAME }}
          STAFF_ADMIN_PASSWORD: ${{ secrets.STAFF_ADMIN_PASSWORD }}

  deploy:
    needs: [ember_test, cypress_test]
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract variables
        shell: bash
        run: |
          echo "::set-output name=BRANCH::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
          echo "::set-output name=GIT_SHA::$(git rev-parse HEAD)"
          echo "::set-output name=GIT_SHA_SHORT::$(git rev-parse --short HEAD)"
          echo "::set-output name=MESSAGE::$(git log --format='%f %b' -n 1 ${{ github.event.after }})"
        id: extract_variables

      - name: Vercel deploy
        uses: amondnet/vercel-action@v20.0.0
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID}}
          vercel-project-id: ${{ secrets.PROJECT_ID}}
          scope: ${{ secrets.TEAM_ID}}
          vercel-project-name: 'bracco'

      - name: Notify Slack
        uses: edge/simple-slack-notify@master
        with:
          channel: '#ops'
          color: 'good'
          text: 'A development branch [${{steps.extract_variables.outputs.BRANCH}}] of Fabrica has been deployed to vercel'
          failure_text: '${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER}) build failed'
          fields: |
            [{ "title": "Commit message", "value": "${{ steps.extract_variables.outputs.MESSAGE }}" },
             { "title": "Committed by", "value": "<https://github.com/${{ github.repository }}/commits?author=${{ github.actor }}|${{ github.actor }}>", "short": true },
             { "title": "Commit SHA", "value": "<https://github.com/${{ github.repository }}/commit/${{ steps.extract_variables.outputs.GIT_SHA }}|${{ steps.extract_variables.outputs.GIT_SHA_SHORT }}>", "short": true },
             { "title": "Repository", "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>", "short": true },
             { "title": "Branch", "value": "<https://github.com/${{ github.repository }}/tree/${{ steps.extract_variables.outputs.BRANCH }}|${{ steps.extract_variables.outputs.BRANCH }}>", "short": true }]
